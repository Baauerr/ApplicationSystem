// <auto-generated />
using System;
using DictionaryService.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DictionaryService.DAL.Migrations
{
    [DbContext(typeof(DictionaryDbContext))]
    partial class DictionaryDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DictionaryService.DAL.Entities.DocumentType", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EducationLevelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("DocumentTypes");
                });

            modelBuilder.Entity("DictionaryService.DAL.Entities.EducationLevel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("EducationLevels");
                });

            modelBuilder.Entity("DictionaryService.DAL.Entities.Faculty", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("DictionaryService.DAL.Entities.ImportHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ImportStatus")
                        .HasColumnType("integer");

                    b.Property<DateTime>("OperationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("ImportHistory");
                });

            modelBuilder.Entity("DictionaryService.DAL.Entities.NextEducationLevel", b =>
                {
                    b.Property<string>("EducationLevelId")
                        .HasColumnType("text");

                    b.Property<string>("DocumentTypeId")
                        .HasColumnType("text");

                    b.HasKey("EducationLevelId", "DocumentTypeId");

                    b.HasIndex("DocumentTypeId");

                    b.ToTable("NextEducationLevel");
                });

            modelBuilder.Entity("DictionaryService.DAL.Entities.Program", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("EducationForm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EducationLevelId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FacultyId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Language")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Programs");
                });

            modelBuilder.Entity("DictionaryService.DAL.Entities.NextEducationLevel", b =>
                {
                    b.HasOne("DictionaryService.DAL.Entities.DocumentType", "DocumentTypes")
                        .WithMany("NextEducationLevels")
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DictionaryService.DAL.Entities.EducationLevel", "EducationLevels")
                        .WithMany("DocumentTypes")
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentTypes");

                    b.Navigation("EducationLevels");
                });

            modelBuilder.Entity("DictionaryService.DAL.Entities.DocumentType", b =>
                {
                    b.Navigation("NextEducationLevels");
                });

            modelBuilder.Entity("DictionaryService.DAL.Entities.EducationLevel", b =>
                {
                    b.Navigation("DocumentTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
